#!/usr/bin/python3

import re, sys, sqlite3

dodebug = False

def debug(*args):
    global dodebug
    if dodebug:
        print(*args)

class LookAhead:
    def __init__(self, it):
        self._it = iter(it)
        self._x = None
        self._cached = False
        self._popcount = 0

    def _fillcache(self):
        if not self._cached:
            self._x = next(self._it)
            self._cached = True

    def hasnext(self):
        try:
            self._fillcache()
            return True
        except StopIteration:
            return False

    def peek(self):
        self._fillcache()
        return self._x

    def pop(self):
        self._fillcache()
        self._cached = False
        self._popcount += 1
        return self._x

    def get_popcount(self):
        return self._popcount

    def undo(self, oldcount):
        d = self.get_popcount() - oldcount
        if d == 0:
            return True
        elif self._cached is None and d == 1:
            self.cached = True
            return True
        else:
            return False

def sequence(parsers):
    def parsesequence(stream):
        result = []
        for p in parsers:
            x = p(stream)
            if x is None:
                return None
            result.append(x)
        return result
    return parsesequence

def alternative(parsers):
    def parsealternative(stream):
        c = stream.get_popcount()
        for p in parsers:
            x = p(stream)
            if x is not None:
                return x
            if not stream.undo(c):
                return None
    return parsealternative

def many(parser):
    def parsemany(stream):
        result = []
        while True:
            c = stream.get_popcount()
            x = parser(stream)
            if x is None:
                if stream.undo(c):
                    return result
                else:
                    return None
            result.append(x)
    return parsemany

def many1(parser):
    return sequence(parser, many(parser))

def eof(stream):
    if stream.hasnext():
        return None
    else:
        return True

def string(x):
    def parsestring(stream):
        if stream.hasnext() and stream.peek() == x:
            return stream.pop()
    return parsestring

def comma(stream):
    return string(',')(stream)

def parenleft(stream):
    return string('(')(stream)

def parenright(stream):
    return string(')')(stream)

def sepby(sep, p):
    def parsesepby(stream):
        if not stream.hasnext():
            return x
        x = p(stream)
        if x is None:
            return None
        c = stream.get_popcount()
        rest = many(sequence([sep, p]))(stream)
        if rest is None:
            if stream.undo(c):
                return [x]
            else:
                return None
        result = [x]
        for y, z in rest:
            result.append(y)
            result.append(z)
        return result
    return parsesepby

def sepbyignore(sep, p):
    q = sepby(sep, p)
    def parsesepbyignore(stream):
        x = q(stream)
        if x is None:
            return None
        return x[0::2]
    return parsesepbyignore

def identifier(stream):
    if stream.hasnext():
        x = stream.peek()
        if x == '*' or x.isalnum() or x[0] == '"':
            return stream.pop()

def predicate(stream):
    c = stream.get_popcount()
    neg = string("!")(stream)
    if neg is None:
        if not stream.undo(c):
            assert False
        neg = False
    p = identifier(stream)
    if p is None:
        return None
    x = parenleft(stream)
    if x is None:
        return None
    args = sepbyignore(comma, identifier)(stream)
    if args is None:
        return None
    x = parenright(stream)
    if x is None:
        return None
    return not neg, p, args

def conjunction(stream):
    return sepbyignore(string('&&'), predicate)(stream)

def relational_calculus(stream):
    x = sepbyignore(string('||'), conjunction)(stream)
    if x is None:
        return None
    if not eof(stream):
        return None
    return x

class Schema:
    def __init__(self, tables):
        self.tables = tables

    def getheader(self, tablename):
        return self.tables.get(tablename)

def sql_string_literal(val):
    val = val.replace('\\', '\\\\')
    val = val.replace('"', '\\"')
    val = '"' + val + '"'
    return val

def convert(schema, boundvars, getvars, conj):
    bigtable = []
    scantables = set()
    variables = set()
    colofvar = dict()
    equalvars = dict()
    valuebinds = []
    notequal = dict()

    for ispositive, table, bindings in conj:
        if table not in schema:
            raise Exception("No such table: {}".format(table))

        if len(schema[table]) != len(bindings):
            raise Exception("Table {} has {} columns, but {} queried"
                    .format(table, len(schema[table]), len(bindings)))

    for i, (ispositive, table, bindings) in enumerate(conj):
        talias = "{}_{}".format(table, i)
        bigtable.append((i, ispositive, table, talias, list(enumerate(bindings))))

    for i, ispositive, table, talias, bindings in bigtable:
        if ispositive:
            scantables.add((table, talias))

    for i, ispositive, table, talias, bindings in bigtable:
        for _, var in bindings:
            if var.isalpha():
                variables.add(var)

    for i, ispositive, table, talias, bindings in bigtable:
        if ispositive:
            for j, var in bindings:
                if var.isalpha():
                    if var not in colofvar:
                        colofvar[var] = talias, schema[table][j], var

    for var in getvars:
        if var not in variables:
            raise Exception("variable {} not bound anywhere".format(var))

    for var in variables:
        if var not in colofvar and var not in boundvars:
            raise Exception("variable {} not bound in any positive predicate"
                                                            .format(var))

    for i, ispositive, table, talias, bindings in bigtable:
        if ispositive:
            for j, var in bindings:
                if var.startswith('"') or var in boundvars:
                    if var.startswith('"'):
                        val = var[1:-1]  # XXX
                    else:
                        val = boundvars[var]
                    valuebinds.append((talias, schema[table][j], val))
                elif var.isalpha():
                    if var not in equalvars:
                        equalvars[var] = []
                    equalvars[var].append((talias, schema[table][j]))
                else:
                    assert(var == '*')

    for i, ispositive, table, talias, bindings in bigtable:
        if not ispositive:
            notequalvars = []
            notvaluebinds = []
            for j, var in bindings:
                talias1, col1, = talias, schema[table][j]
                if var.startswith('"') or var in boundvars:
                    if var.startswith('"'):
                        val = var[1:-1]  # XXX
                    else:
                        val = boundvars[var]
                    notvaluebinds.append((talias1, col1, val))
                elif var.isalpha():
                    talias2, col2, _ = colofvar[var]
                    notequalvars.append((talias1, col1, talias2, col2))
                else:
                    assert(var == '*')
            notequal[(table, talias)] = notequalvars, notvaluebinds

    result = "SELECT DISTINCT\n"

    result += ",\n".join(
        "\t{}.{} AS {}".format(*colofvar[var])
        for var in getvars
    )
    result += "\n"

    result += "FROM\n"

    result += ",\n".join(
        "\t{} {}".format(table, talias)
        for table, talias in scantables
    )
    result += "\n"

    result += "WHERE 1\n"

    for talias, col, val in valuebinds:
        lit = sql_string_literal(val)
        result += "\tAND {}.{} = {}\n".format(talias, col, lit)

    for x in equalvars.values():
        for (talias1, col1), (talias2, col2) in zip(x, x[1:]):
            result += ("\tAND {}.{} = {}.{}\n"
                                .format(talias1, col1, talias2, col2))

    for table, talias in notequal:
        result += ("\tAND NOT EXISTS(SELECT 1 FROM {} {} WHERE 1\n"
                            .format(table, talias))
        notequalvars, notvaluebinds = notequal[(table, talias)]

        for talias1, col1, talias2, col2 in notequalvars:
            result += ("\t\tAND {}.{} = {}.{}\n"
                            .format(talias1, col1, talias2, col2))

        for talias1, col1, val in notvaluebinds:
            lit = sql_string_literal(val)
            result += ("\t\tAND {}.{} = {}\n"
                            .format(talias1, col1, lit))

        result += "\t)\n"

    return result


def makesql(schema, boundvars, getvars, conjs):
    sqls = [convert(schema, boundvars, getvars, conj) for conj in conjs]
    return '\nUNION\n'.join(sqls) + "\nORDER BY %s ASC" % (', '.join(getvars))

def lex(query):
    out = []
    exprs = [r'!', r'[a-zA-Z][a-zA-Z0-9]*', r'\*', r'"[^"]*"', r',', r'&&', r'\|\|',r'\(',r'\)']
    while True:
        query = query.strip()
        if not query:
            break
        x = None
        for e in exprs:
            m = re.match(e, query)
            if m is not None:
                x = m.group(0)
                break
        if x is None:
            return None
        query = query[len(x):]
        out.append(x)
    return out

def splitline(line):
    out = []
    w = ''
    started = False
    escaped = False
    quoted = False
    for c in line:
        if escaped:
            w += c
            started = True
            escaped = False
        elif c == '\\':
            escaped = True
        elif c == '"':
            quoted = not quoted
            started = True
        elif quoted or not c.isspace():
            w += c
            started = True
        elif started:
            out.append(w)
            w = ''
            started = False
    if quoted or escaped:
        print('Unexpected end of line: ' + line, file=sys.stderr)
        return None
    if started:
        out.append(w)
    return out

def escapetoken(x):
    if len(x.split(None, 1)) > 1:
        x = x.replace('\\','\\\\')
        x = x.replace('"', '\\"')
        x = '"' + x + '"'
    return x

def joinline(args):
    out = []
    for x in args:
        x = escapetoken(x)
        out.append(x)
    return '\t'.join(out)

def build_db(lines):
    defaultcolnames = ['_%d_' % x for x in range(1, 100)]
    conn = sqlite3.connect(':memory:')
    schema = {}
    rows = {}

    for line in lines:
        line = line.strip()
        if not line or line[0] in '!#%':
            continue
        words = splitline(line)
        tblname = words[0]
        values = words[1:]
        if len(values) == 0:
            raise Exception('value(s) missing: ' + line)
        if len(values) > len(defaultcolnames):
            raise Exception('sorry, too many values: ' + line)
        if tblname not in schema:
            rows[tblname] = []
            schema[tblname] = defaultcolnames[:len(values)]
            names = [x + ' VARCHAR NOT NULL' for x in schema[tblname]]
            sql = 'CREATE TABLE %s (%s)' % (tblname, ', '.join(names))
            debug(sql)
            conn.execute(sql)
        if len(values) != len(schema[tblname]):
            raise Exception('too few or too many values: %s %s' % (tblname, values))
        rows[tblname].append(values)

    for tblname in rows:
        numcols = len(schema[tblname])
        sql = 'INSERT INTO %s VALUES (%s)' % (tblname, ', '.join('?' * numcols))
        conn.executemany(sql, rows[tblname])

    return conn, schema

def parse_binding(x):
    if '=' in x:
        k, v = x.split('=', 1)
        if k[:1].isalpha() and k.isalnum():
            return k, v
    return None

def parse_selectvars(var_string):
    vs = [x.strip() for x in var_string.split(',')]
    if len(vs) == 0:
        return None
    for v in vs:
        if not v[:1].isalpha() or not v.isalnum():
            return None
    return vs

def parse_query(query_string):
    tokens = lex(query_string)
    if tokens is None:
        raise Exception('Failed to lex query')
    return relational_calculus(LookAhead(tokens))

def parse_args(args):
    pretty = None
    dodebug = None
    boundvars = {}
    wants = None
    conjs = None

    while args and args[0][:1] == '-':
        if args[0] == '--debug':
            dodebug = True
            args = args[1:]
        elif args[0] == '--pretty':
            pretty = True
            args = args[1:]
        elif args[0][:2] == '-v':
            x = parse_binding(args[0][2:])
            if x is None:
                raise Exception("Invalid variable binding: " + args[0])
            var, val = x
            if var in boundvars:
                raise Exception("Variable bound twice: " + var)
            boundvars[var] = val
            args = args[1:]
        else:
            raise Exception("Unrecognized command line argument: " + args[0])

    if len(args) != 2:
        print("""Usage:
    relq [OPTION...] [-vVAR=VALUE...] 'VAR[,VAR...]' 'QUERY' < input
available options: --debug, --pretty

Example:
    relq -vY=2016 S,SD,L,LD 'student(S,SD) && immatriculated(S, Y) && lecture(L,LD) && registered(S,L)' < example.txt""", file=sys.stderr)
        sys.exit(1)

    wants = parse_selectvars(args[0])
    conjs = parse_query(args[1])

    if wants is None:
        raise Exception("Bad query variables")
    if conjs is None:
        raise Exception('Failed to parse query')

    return dodebug, pretty, wants, boundvars, conjs

def relq_main(args):
    global dodebug

    dodebug, pretty, wants, boundvars, conjs = parse_args(args)
    debug('query string parsed as', conjs)

    conn, schema = build_db(sys.stdin)

    sql = makesql(schema, boundvars, wants, conjs)
    debug(sql)

    result = list(conn.execute(sql))

    if pretty:
        colw = [0] * len(wants)
        for row in result:
            for i, x in enumerate(row[:-1]):
                colw[i] = max(colw[i], len(x) + 2)
        for row in result:
            line = ''.join(x.ljust(colw[i]) for i, x in enumerate(row))
            print(line)
    else:
        for row in result:
            print(joinline(row))

if __name__ == '__main__':
    relq_main(sys.argv[1:])
